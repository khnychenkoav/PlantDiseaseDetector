============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.5, pluggy-1.5.0
rootdir: /home/tyhyqo/Education/MAI/Python/PlantDiseaseDetector/backend
plugins: asyncio-0.26.0, anyio-4.7.0
asyncio: mode=strict, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 25 items

tests/test_auth.py ......                                                [ 24%]
tests/test_disease.py ......s                                            [ 52%]
tests/test_history.py ..                                                 [ 60%]
tests/test_user.py ..........                                            [100%]

=============================== warnings summary ===============================
../venv/lib/python3.10/site-packages/torchvision/models/_utils.py:208
  /home/tyhyqo/Education/MAI/Python/PlantDiseaseDetector/venv/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
    warnings.warn(

../venv/lib/python3.10/site-packages/torchvision/models/_utils.py:223
  /home/tyhyqo/Education/MAI/Python/PlantDiseaseDetector/venv/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.
    warnings.warn(msg)

tests/test_auth.py::test_register_user_success
  /home/tyhyqo/Education/MAI/Python/PlantDiseaseDetector/venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:884: DeprecationWarning: The event_loop fixture provided by pytest-asyncio has been redefined in
  /home/tyhyqo/Education/MAI/Python/PlantDiseaseDetector/backend/tests/conftest.py:70
  Replacing the event_loop fixture with a custom implementation is deprecated
  and will lead to errors in the future.
  If you want to request an asyncio event loop with a scope other than function
  scope, use the "loop_scope" argument to the asyncio mark when marking the tests.
  If you want to return different types of event loops, use the event_loop_policy
  fixture.
  
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================== 24 passed, 1 skipped, 3 warnings in 36.82s ==================
